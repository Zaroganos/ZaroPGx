services:
  # PostgreSQL Database with CPIC data
  db:
    image: postgres:15
    container_name: pgx_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: cpic_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: cpic_db
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    ports:
      - "5444:5432"
    healthcheck:
      test: ["CMD", "echo", "Healthcheck disabled for debugging"]
      interval: 10s
      timeout: 5s
      retries: 1
    networks:
      - pgx-network

  # PharmCAT Service - using official Docker image
  pharmcat:
    image: pgkb/pharmcat
    container_name: pgx_pharmcat
    restart: unless-stopped
    volumes:
      - ./data:/pharmcat/data
      - pharmcat-jar:/pharmcat
    ports:
      - "2323:8080"
    environment:
      - JAVA_OPTS=-Xmx1g
    healthcheck:
      test: ["CMD", "echo", "Healthcheck disabled for debugging"]
      interval: 10s
      timeout: 5s
      retries: 1
    networks:
      - pgx-network
    # Since we're using the PharmCAT wrapper to make direct JAR calls,
    # we just need to keep this container running
    command: ["sh", "-c", "echo 'PharmCAT service running...' && tail -f /dev/null"]

  # PharmCAT Wrapper Service
  pharmcat-wrapper:
    build:
      context: ./docker/pharmcat
      dockerfile: Dockerfile.pharmcat-wrapper
    container_name: pgx_pharmcat_wrapper
    restart: unless-stopped
    depends_on:
      - pharmcat
    environment:
      - DATA_DIR=/data
      - PHARMCAT_JAR=/pharmcat/pharmcat.jar
    volumes:
      - ./data:/data
      - pharmcat-jar:/pharmcat:ro
    ports:
      - "5001:5000"
    healthcheck:
      test: ["CMD", "echo", "Healthcheck disabled for debugging"]
      interval: 10s
      timeout: 5s
      retries: 1
    networks:
      - pgx-network

  # Aldy Service for pharmacogenomic gene calling
  aldy:
    build:
      context: ./docker/aldy
      dockerfile: Dockerfile.aldy
    container_name: pgx_aldy
    restart: unless-stopped
    volumes:
      - ./data:/data
    ports:
      - "5002:5000"
    environment:
      - MAX_WORKERS=4  # Limit workers for multi-gene analysis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - pgx-network

  # Main FastAPI Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: pgx_app
    restart: unless-stopped
    depends_on:
      - db
      - pharmcat-wrapper
      - aldy
    environment:
      - DATABASE_URL=postgresql://cpic_user:${POSTGRES_PASSWORD}@db:5432/cpic_db
      - SECRET_KEY=${SECRET_KEY}
      - PHARMCAT_API_URL=http://pharmcat-wrapper:5000
      - PHARMCAT_SERVICE_URL=http://pharmcat:8080
      - PHARMCAT_JAR_PATH=/pharmcat/pharmcat.jar
      - ALDY_API_URL=http://aldy:5000
      - PYTHONPATH=/app
    volumes:
      - ./:/app  # Mount the entire project directory to /app instead of root
      - ./data:/data
    ports:
      - "8765:8000"
    healthcheck:
      test: ["CMD", "echo", "Healthcheck disabled for debugging"]
      interval: 10s
      timeout: 5s
      retries: 1
    networks:
      - pgx-network
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

volumes:
  pgdata:
    driver: local
  pharmcat-jar:
    driver: local

networks:
  pgx-network:
    driver: bridge 