flowchart TD
  %% ZaroPGx end-to-end processing flow

  subgraph Client["Client/UI"]
    U[User]
    U -->|Upload VCF/BAM/CRAM/SAM/FASTQ/ZIP| UploadEndpoints["POST /upload-vcf<br/>POST /upload/genomic-data"]
  end

  subgraph FastAPI["FastAPI App (app/main.py, app/api/routes)"]
    UploadEndpoints --> SaveTmp[/Save to /tmp and /data/uploads/]
    SaveTmp --> Detect[Detect file type]
    Detect -->|ZIP| Extract[Extract ZIP → locate genomic file]
    Extract --> Detect
    
    %% File type routing
    Detect -->|VCF| VCF[VCF]
    Detect -->|BAM| BAM[BAM]
    Detect -->|CRAM| CRAM[CRAM]
    Detect -->|SAM| SAM[SAM]
    Detect -->|FASTQ| FASTQ[FASTQ]
    
    %% File conversion paths
    CRAM -->|samtools| ConvertCRAM[Convert CRAM → BAM]
    SAM -->|samtools/GATK| ConvertSAM[Convert SAM → BAM]
    FASTQ -->|bwa-mem2/BWA| AlignFASTQ[Align FASTQ → BAM]
    
    ConvertCRAM --> BAM
    ConvertSAM --> BAM
    AlignFASTQ --> BAM
    
    %% HLA typing for alignment files
    BAM -->|if HLA enabled| HLA[HLA Typing<br/>OptiType/hlatyping]
    HLA --> BAM_HLA[BAM with HLA data]
    BAM_HLA --> PyPGx_BAM2VCF[PyPGx BAM2VCF<br/>Convert BAM → VCF]
    
    %% Direct VCF path
    VCF --> VCF_Ready[VCF Ready]
    PyPGx_BAM2VCF --> VCF_Ready
    
    %% PyPGx analysis decision
    VCF_Ready --> PYP_DEC{CYP2D6 star alleles?}
    PYP_DEC -->|Yes| PYP[PyPGx Analysis<br/>Star allele calling]
    PYP --> VCF_Processed[VCF with PyPGx calls]
    PYP_DEC -->|No| VCF_Processed
    
    %% PharmCAT analysis
    VCF_Processed --> PCAT[PharmCAT Analysis<br/>Drug recommendations]
    PCAT --> PCOutputs["report.json<br/>report.html<br/>report.tsv<br/>match.json<br/>phenotype.json"]
    
    %% Report generation pipeline
    PCOutputs --> Normalize["Normalize results<br/>(pharmcat_client.normalize_...)"]
    Normalize --> WorkflowDiagram[Generate Workflow Diagram<br/>Visual representation]
    WorkflowDiagram --> Generate["Generate Reports<br/>(app/reports/generator.py)"]
    Generate --> ReportsDir[/Write to /data/reports/<report_id>/]
    ReportsDir --> Serve["Serve at /reports/* (StaticFiles)"]
    Serve --> ExportDec{Export to FHIR?}
    ExportDec -->|No| Done((Complete))
  end

  subgraph Services["External services (docker-compose)"]
    GATK["GATK API<br/>(docker/gatk-api)"]
    HLA_SVC["HLA Typing Service<br/>(docker/hlatyping)"]
    PYP["PyPGx Service<br/>(docker/pypgx)"]
    PCAT["PharmCAT API/JAR<br/>(docker/pharmcat or JAR)"]
    MTDNA["mtDNA Server<br/>(docker/mtdna-server-2)"]
  end

  subgraph FHIR["FHIR Export (optional)"]
    ExportDec -->|Yes| FhirRoute["POST /reports/<report_id>/export-to-fhir"]
    FhirRoute --> FhirClient["FhirClient<br/>(app/reports/fhir_client.py)"]
    FhirClient --> Patient[(Patient)]
    FhirClient --> Observations[(Observation per gene)]
    FhirClient --> DiagnosticReport[(DiagnosticReport with links)]
    DiagnosticReport --> EHR[External FHIR server]
  end

  %% Progress tracking
  UploadEndpoints -. updates .-> JobStatus["/progress/<job_id><br/>/job-status/<job_id>"]

  %% Styling
  classDef app fill:#e7f0ff,stroke:#5b8def,stroke-width:1px;
  classDef svc fill:#f8f1ff,stroke:#9b59b6,stroke-width:1px;
  classDef fhir fill:#eaffea,stroke:#27ae60,stroke-width:1px;
  classDef io fill:#fff7e6,stroke:#f39c12,stroke-width:1px;
  classDef conversion fill:#ffe6e6,stroke:#e74c3c,stroke-width:1px;
  classDef analysis fill:#e6ffe6,stroke:#27ae60,stroke-width:1px;

  class ReportsDir,Serve,SaveTmp io;
  class ConvertCRAM,ConvertSAM,AlignFASTQ,PyPGx_BAM2VCF conversion;
  class HLA,PYP,PCAT,WorkflowDiagram analysis;
